#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import subprocess as sp
import xmlrpc.client as rpc
import urllib.parse as up
import urllib.request as request
from bs4 import BeautifulSoup
from multiprocessing import Pool
import sys
import os
import os.path
import json
import time
import tempfile
import chardet
import io
import argparse
from abc import ABC, abstractmethod
from functools import partial

class BaseDownloader(ABC):

    @abstractmethod
    def get_download_list(self):
        pass

    @abstractmethod
    def merge_channels(self):
        pass

class YoutubeDownloader(BaseDownloader):

    def __init__(self, args, url):
        self.url = url
        self.choose_best = args.best
        self.video_idx = args.index
        self.auto_number = args.auto_number
        self.dllist = []

    def get_download_list(self):
        if os.path.exists("info.json"):
            print("use exists json file")
            with open("info.json", "r") as f:
                content = f.read()
        else:
            with sp.Popen(["youtube-dl", "--write-sub", "--write-auto-sub", "-j", self.url], stdout=sp.PIPE) as proc:
                content = proc.stdout.read().decode("utf-8")
                # with open("info.json", "w") as f:
                #     f.write(content)
        self.parse_json(content)
        return self.dllist

    def merge_channels(self):
        i = 0
        for dldict in self.dllist:
            # each download has two parts, dash audio and dash video file
            audioFile = os.path.join(dldict["audio"]["dir"], dldict["audio"]["out"])
            videoFile = os.path.join(dldict["video"]["dir"], dldict["video"]["out"])
            final = os.path.splitext(videoFile.replace('-video', ''))[0]+".mkv"
            if dldict.get("sub"):
                subFile = os.path.join(dldict["sub"]["dir"], dldict["sub"]["out"])
                # use mkv to merge the video and audio
                result = sp.run(
                    [
                        'ffmpeg', '-y', '-i', videoFile, '-i', audioFile, '-i',
                        subFile, '-map', '0:0', '-map', '1:0', '-map', '2:0',
                        '-vcodec', 'copy', '-acodec', 'copy', '-scodec', 'ass',
                        final
                    ],
                    stdout=sp.PIPE,
                    stderr=sp.PIPE)
                if result.returncode == 0:
                    os.remove(subFile)
            else:
                # use mkv to merge the video and audio
                result = sp.run(
                    [
                        'ffmpeg', '-y', '-i', videoFile, '-i', audioFile,
                        '-map', '0:0', '-map', '1:0', '-vcodec', 'copy',
                        '-acodec', 'copy', final
                    ],
                    stdout=sp.PIPE,
                    stderr=sp.PIPE)
            if result.returncode == 0:
                # remove the orignal files
                os.remove(videoFile)
                os.remove(audioFile)
                print("final file:" + final)
            else:
                print("failed to merge video: " + final)
                os.remove(final)

    def parse_json(self, content):
        # discard the last empty line
        info = content.split("\n")[:-1]
        number = 0
        for line in info:
            episode = json.loads(line)
            if episode["playlist"]:
                playlist = episode["playlist"]
            else:
                playlist = ""
            formats = episode["formats"]
            index = 0
            # the last dash audio has best quality
            for fmt in formats:
                if fmt["format_note"] == "DASH audio":
                    index += 1
                else:
                    break
            number += 1
            if self.auto_number:
                prefix = str(number)+" - "
            else:
                prefix = ""
            basename = prefix + os.path.splitext(episode["_filename"])[0].replace('-'+episode["id"], '')
            name = basename+"-audio."+formats[index - 1]["ext"]
            dldict = {}
            # download the audio with best quality
            dldict["audio"] = {"dir":os.path.join(os.getcwd(), playlist.replace('/', '_').replace(':', '-')),
                "out":name, "url":formats[index - 1]["url"], "id":episode["id"]}
            print(basename)
            suburl = self.get_eng_subtitle(episode)
            if suburl:
                name = basename+"-sub.vtt"
                dldict["sub"] = {"dir":os.path.join(os.getcwd(), playlist.replace('/', '_').replace(':', '-')),
                    "out":name, "url":suburl, "id":episode["id"]}
            if self.choose_best:
                for index in reversed(range(index, len(formats))):
                    if formats[index]["acodec"] == "none" and formats[index]["vcodec"] != "vp9":
                        break
                print(
                    "index: {:<2}, vcodec: {:<11}, format: {:<23}, size: {:<11}".
                    format(
                        str(index), formats[index]["vcodec"],
                        formats[index]["format"],
                        str(formats[index]["filesize"])))
            elif self.video_idx:
                index = int(self.video_idx)
                print(
                    "index: {:<2}, vcodec: {:<11}, format: {:<23}, size: {:<11}".
                    format(
                        str(index), formats[index]["vcodec"],
                        formats[index]["format"],
                        str(formats[index]["filesize"])))
            else:
                for index in range(index, len(formats)):
                    if formats[index]["acodec"] == "none":
                        print(
                            "index: {:<2}, vcodec: {:<11}, format: {:<23}, size: {:<11}".
                            format(
                                str(index), formats[index]["vcodec"],
                                formats[index]["format"],
                                str(formats[index]["filesize"])))
                    else:
                        break
                index = int(input("select index:"))
            name = basename+"-video."+formats[index]["ext"]
            dldict["video"] = {"dir":os.path.join(os.getcwd(), playlist.replace('/', '_').replace(':', '-')),
                "out":name, "url":formats[index]["url"], "id":episode["id"]}
            self.dllist.append(dldict)
            # print("url:"+formats[index]["url"])

    def get_eng_subtitle(self, episode):
        subtitles = episode["subtitles"]
        eng = subtitles.get("en")
        if eng:
            for fmt in eng:
                if fmt["ext"] == "vtt":
                    return fmt["url"]
        subtitles = episode["automatic_captions"]
        eng = subtitles.get("en")
        if eng:
            for fmt in eng:
                if fmt["ext"] == "vtt":
                    return fmt["url"]
        return None

    def autonumber_downloaded(self):
        number = 0
        for i, dldict in enumerate(self.dllist):
            for key, dl in dldict.items():
                filename = dl["out"]
                if os.path.exists(filename):
                    os.rename(filename, str(number)+" - "+filename)

class TedDownloader(BaseDownloader):

    def __init__(self, args, url):
        self.url = url
        self.dllist = []

    def get_download_list(self):
        # with open("info.json", "rb") as f:
        #     enc = chardet.detect(f.read(4096))["encoding"]
        # with open("info.json", "r", encoding=enc.replace("LE","").replace("BE","")) as f:
        #     info = f.read().split("\n")[:-1]
        with sp.Popen(["youtube-dl", "--sub-format", "srt", "--sub-lang", "en", "--write-sub", "-j", self.url], stdout=sp.PIPE) as proc:
            # discard the last empty line
            info = proc.stdout.read().decode("utf-8").split("\n")[:-1]
            for line in info:
                episode = json.loads(line)
                if episode["playlist"]:
                    playlist = episode["playlist"]
                else:
                    playlist = ""
                dldict = {}
                # put subtitle before video
                if episode["requested_subtitles"]:
                    dldict["sub"] = {
                        "dir":
                        os.path.join(
                            os.getcwd(),
                            playlist.replace('/', '_').replace(':', '-')),
                        "out":
                        os.path.splitext(episode["_filename"].replace(
                            '-' + episode["id"], ''))[0] + ".srt",
                        "url":
                        episode["requested_subtitles"]["en"]["url"]
                    }
                dldict["video"] = {"dir":os.path.join(os.getcwd(), playlist.replace('/', '_').replace(':', '-')),
                    "out":episode["_filename"].replace('-'+episode["id"], ''), "url":episode["url"]}
                # print("url: " + episode["url"])
        return self.dllist

    def merge_channels(self):
        for dldict in self.dldict:
            if dldict.get("sub"):
                videoFile = os.path.join(dldict["video"]["dir"], dldict["video"]["out"])
                srtFile = os.path.join(dldict["sub"]["dir"], dldict["sub"]["out"])
                # use mkv to merge the video and srt
                final = os.path.splitext(videoFile)[0]+".mkv"
                result = sp.run(['ffmpeg', '-y', '-i', videoFile, '-i', srtFile, '-map', '0:0', '-map', '0:1', '-map', '1:0',
                    '-vcodec', 'copy', '-acodec', 'copy', '-scodec', 'copy', final], stdout=sp.PIPE, stderr=sp.PIPE)
                if result.returncode == 0:
                    os.remove(videoFile)
                    os.remove(srtFile)
                    print("final file:" + final)
                else:
                    print("failed to merge video: " + final)
                    os.remove(final)

class MiscDownloader(BaseDownloader):

    def __init__(self, args, url):
        self.url = url
        self.dllist = []

    def get_download_list(self):
        with sp.Popen(["youtube-dl", "-j", self.url], stdout=sp.PIPE) as proc:
            # discard the last empty line
            info = proc.stdout.read().decode("utf-8").split("\n")[:-1]
            for line in info:
                episode = json.loads(line)
                dldict = {}
                dldict["video"] = {"dir":os.path.join(os.getcwd()),
                    "out":episode["_filename"], "url":episode["url"]}
                self.dllist.append(dldict)
            # if the url is not supported, exit the application
            if "episode" not in locals():
                sys.exit("url not supported")
            # assume that even if there are several parts, they belong to one file
            # after download finish, we will concatenate them.
            self.final = episode["title"]+'.'+episode["ext"]
        return self.dllist

    def merge_channels(self):
        if len(self.dllist) > 1:
            tmp = tempfile.mkstemp(suffix=".txt", dir=os.getcwd(), text=True)[1]
            with open(tmp, "w") as f:
                for download in self.dllist:
                    f.write("file '"+download["video"]["out"]+"'\n")
            # refer to https://trac.ffmpeg.org/wiki/Concatenate
            result = sp.run(['ffmpeg', '-y', '-f', 'concat', '-i', tmp, '-c', 'copy', self.final], stdout=sp.PIPE, stderr=sp.PIPE)
            if result.returncode == 0:
                os.remove(tmp)
                for download in self.dllist:
                    os.remove(download["video"]["out"])
            else:
                print("fail to merge video:" + self.final)
                os.remove(self.final)
        else:
            if os.path.exists(self.dllist[0]["video"]["out"]):
                os.rename(self.dllist[0]["video"]["out"], self.final)

        # movist doesn't support f4v, convert to mp4, just change the file format, it's fast
        if sys.platform == "darwin" and os.path.splitext(self.final)[1] == ".f4v" and os.path.exists(self.final):
            result = sp.run(
                [
                    'ffmpeg', '-y', '-i', self.final, '-vcodec', 'copy',
                    '-acodec', 'copy',
                    os.path.splitext(self.final)[0] + ".mp4"
                ],
                stdout=sp.PIPE,
                stderr=sp.PIPE)
            if result.returncode == 0:
                os.remove(self.final)
            else:
                print("fail to merge video:" + self.final)
                os.remove(self.final)
        print("final file:" + self.final)

class Aria2c(object):

    def __init__(self, proxy):
        self.proxy = proxy

    def download(self, dllist):
        with rpc.ServerProxy('http://localhost:6800/rpc') as s:
            dlcnt = 0
            idxmap = {}
            mc = rpc.MultiCall(s)
            for i, dldict in enumerate(dllist):
                for key, download in dldict.items():
                    if self.proxy:
                        mc.aria2.addUri([download["url"]], {"dir":download["dir"], "out":download["out"], "all-proxy":"http://127.0.0.1:8118"})
                    else:
                        mc.aria2.addUri([download["url"]], {"dir":download["dir"], "out":download["out"]})
                    dlcnt = dlcnt + 1
                    print(str(dlcnt) + ". downloading " + download["out"])
                    idxmap[dlcnt] = {"idx":i, "key":key, "error":0}
            gids = list(mc()) #real execute, don't forget to call this

            failedCount = 0
            while True:
                mc = rpc.MultiCall(s)
                for gid in gids:
                    mc.aria2.tellStatus(gid, ["gid", "status", "completedLength"])
                completed = 0
                for stat in mc():
                    if stat["status"] == "error":
                        index = gids.index(stat["gid"])
                        idxmap[index]["error"] += 1
                        idx = idxmap[index]["idx"]
                        key = idxmap[index]["key"]
                        dldict = dllist[idx][key]
                        if idxmap[index]["error"] > 5:
                            failedCount += 1
                            print("can not download: "+dldict["out"])
                            print(dldict["url"])
                            continue
                        gids.remove(stat["gid"])
                        print("download again: " + dldict["out"])
                        s.aria2.removeDownloadResult(stat["gid"])
                        gid = s.aria2.addUri([dldict["url"]], {"dir":dldict["dir"], "out":dldict["out"]})
                        gids.insert(index, gid)
                    elif stat["status"] == "complete":
                        completed += 1
                if completed + failedCount == len(gids):
                    break
                else:
                    time.sleep(3)

def download_video(url, args):
    #youtube.com or youtu.be
    if "youtu" in url:
        downloader = YoutubeDownloader(args, url)
        proxy = True
    elif "ted.com" in url:
        downloader = TedDownloader(args, url)
        proxy = True
    else:
        downloader = MiscDownloader(args, url)
        proxy = False
    dllist = downloader.get_download_list()
    # override the argument.
    if args.proxy:
        proxy = bool(args.proxy)

    # return
    aria2c = Aria2c(proxy)
    aria2c.download(dllist)
    downloader.merge_channels()

def bundle_download(arguments):
    with open(arguments.url, "r") as f:
        urls = f.readlines()
        # for url in urls:
        #     print(url)
        #     download_video(url)
        with Pool(5) as p:
            p.map(partial(download_video, args=arguments), urls)

def main():
    arg_parser = argparse.ArgumentParser(
        prog='dl-video',
        epilog='dl-video',
        description='download video easily',
        formatter_class=argparse.RawTextHelpFormatter
    )
    arg_parser.add_argument(
        'url',
        help="the video's url"
    )
    arg_parser.add_argument(
        '-an',
        '--auto_number',
        action='store_true',
        help='auto increase number'
    )
    arg_parser.add_argument(
        '-b',
        '--best',
        action='store_true',
        help='choose best video quality'
    )
    arg_parser.add_argument(
        '-i',
        '--index',
        nargs=1,
        type=int,
        help='choose video index manually'
    )
    arg_parser.add_argument(
        '-p',
        '--proxy',
        nargs=1,
        type=int,
        help='choose proxy or not manually'
    )
    arg_parser.add_argument(
        '-f',
        '--file_input',
        action='store_true',
        help='file contains the video urls'
    )

    args = arg_parser.parse_args()
    if args.file_input:
        bundle_download(args)
    else:
        download_video(args.url, args)

if __name__ == "__main__":
    main()
